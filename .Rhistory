X_tst_stocks = tst_stocks["Compound"]
y_trn_stocks = trn_stocks["Close"]
y_tst_stocks = tst_stocks["Close"]
X_trn_stocks_min = min(X_trn_stocks)
X_trn_stocks_max = max(X_trn_stocks)
lstat_grid = data.frame(lstat = seq(X_trn_stocks_min, X_trn_stocks_max,
by = 0.01))
pred_001 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 1)
pred_005 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 5)
pred_010 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 10)
pred_050 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 50)
pred_100 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 100)
pred_250 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 250)
df <- cbind(pred_001$pred)
df2 = stocks$Close[0:146]
df = df[0:146]
plot(df2, pch=0, col="red",type="l",lwd=1,xlab="Days", ylab="Prices")
lines(df, pch=0,col="blue")
title("AMZN k = 250")
legend(c("Actual","Predicted"), lwd=c(5,2), col=c("red","blue"), y.intersp=0.6,x="top" )
k <- c(1,5,50,100,150)
for(x in k){
predic = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = x)
d = predic$pred
accuracy[x] <- mean( d[0:100]== df2[0:100])
}
plot(k, accuracy[0:5], type = 'b',xlab="Accuracy",ylab="k values")
library(FNN)
library(MASS)
stocks <- read.csv('NFLX.csv')
RemoveDollarSign <- function(ticker){
ticker$Close = as.numeric(gsub("[\\$,]", "", ticker$Close))
ticker$Open = as.numeric(gsub("[\\$,]", "", ticker$Open))
ticker$High = as.numeric(gsub("[\\$,]", "", ticker$High))
ticker$Low = as.numeric(gsub("[\\$,]", "", ticker$Low))
return (ticker)
}
stocks = RemoveDollarSign(stocks)
set.seed(42)
stocks_idx = sample(1:nrow(stocks), size = 250, replace = TRUE)
trn_stocks = stocks[stocks_idx, ]
tst_stocks  = stocks[-stocks_idx, ]
X_trn_stocks = trn_stocks["Compound"]
X_tst_stocks = tst_stocks["Compound"]
y_trn_stocks = trn_stocks["Close"]
y_tst_stocks = tst_stocks["Close"]
X_trn_stocks_min = min(X_trn_stocks)
X_trn_stocks_max = max(X_trn_stocks)
lstat_grid = data.frame(lstat = seq(X_trn_stocks_min, X_trn_stocks_max,
by = 0.01))
pred_001 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 1)
pred_005 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 5)
pred_010 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 10)
pred_050 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 50)
pred_100 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 100)
pred_250 = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = 250)
df <- cbind(pred_001$pred)
df2 = stocks$Close[0:146]
df = df[0:146]
plot(df2, pch=0, col="red",type="l",lwd=1,xlab="Days", ylab="Prices")
lines(df, pch=0,col="blue")
title("AMZN k = 250")
legend(c("Actual","Predicted"), lwd=c(5,2), col=c("red","blue"), y.intersp=0.6,x="top" )
k <- c(1,5,50,100,150)
for(x in k){
predic = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = x)
d = predic$pred
accuracy[x] <- mean( d[0:100]== df2[0:100])
}
plot(k, accuracy[0:5], type = 'b',xlab="Accuracy",ylab="k values")
source('~/r-arima/regression.r', echo=TRUE)
k <- c(1,5,50,100,250)
for(x in k){
predic = knn.reg(train = X_trn_stocks, test = lstat_grid, y = y_trn_stocks, k = x)
d = predic$pred
accuracy[x] <- mean( d[0:100]== df2[0:100])
}
plot(k, accuracy[0:5], type = 'b',xlab="k values",ylab="Accuracy")
source('~/r-arima/knn.r', echo=TRUE)
source('~/r-arima/knn.r', echo=TRUE)
source('~/r-arima/knn.r', echo=TRUE)
source('~/r-arima/knn.r', echo=TRUE)
k <- 1:250
source('~/r-arima/knn.r', echo=TRUE)
source('~/r-arima/knn.r', echo=TRUE)
prediction
table(prediction, stocks$Increase[!stocksTrain])
class(prediction)
prediction$
source('~/r-arima/knn.r', echo=TRUE)
source('~/r-arima/knn.r', echo=TRUE)
summary(prediction)
library(ggplot2)
source('~/r-arima/knn.r', echo=TRUE)
mine.heatmap <- ggplot(data = prediction.long, mapping = aes(x = Sample.name,
y = Class,
fill = Abundance)) +
geom_tile() +
xlab(label = "Sample")
mine.heatmap
mine <- ggplot(data = prediction.long, mapping = aes(x = Sample.name,
y = Class,
fill = Abundance)) +
geom_tile() +
xlab(label = "Sample")
mine
p <- ggplot(data = prediction.long, mapping = aes(x = Sample.name,
y = Class,
fill = Abundance)) +
geom_tile() +
xlab(label = "Sample")
p <- ggplot(data = prediction, mapping = aes(x = Sample.name,
y = Class,
fill = Abundance)) +
geom_tile() +
xlab(label = "Sample")
typeof(prediction)
plot(prediction)
spineplot(prediction)
spineplot(prediction,stock$Increase)
spineplot(prediction,stocks$Increase)
spineplot(stocks$Increase,prediction)
spineplot(stocks$Increase[0:200],prediction[0:200])
spineplot(stocks$Increase[!stocksTrain],prediction)
spineplot(stocks$Increase[!stocksTrain],prediction,xlab="Actual")
boxplot(prediction)
barplot(prediction)
barplot(1,prediction)
install.packages('gmodels')
#import required library
library(gmodels)
CrossTable(prediction, stocks$Increase[!stocksTrain])
CrossTable(stocks$Increase[!stocksTrain],predicted)
CrossTable(stocks$Increase[!stocksTrain],prediction)
ctable <- as.table(prediction)
install.packages("yardstick")
library(yardstick)
conf_matrix(prediction, stocks$Increase[!stocksTrain], title = "Conf. Matrix Example")
library(yardstick)
conf_matrix(prediction, stocks$Increase[!stocksTrain], title = "Conf. Matrix Example")
library(yardstick)
conf_mat(prediction, stocks$Increase[!stocksTrain], title = "Conf. Matrix Example")
TClass <- as.factor(stocks$Increase[!stocksTrain])
PClass = prediction
df <- data.frame(TClass, PClass)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
TClass <- as.factor(stocks$Increase[!stocksTrain])
PClass = prediction
df <- data.frame(TClass, PClass)
Y = stocks$Apple
library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
TClass <- as.factor(stocks$Increase[!stocksTrain])
PClass = prediction
df <- data.frame(TClass, PClass)
Y = stocks$Apple
library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
source('~/r-arima/knn.r', echo=TRUE)
table(prediction, stocks$Increase[!stocksTrain])
CrossTable(stocks$Increase[!stocksTrain],prediction)
source('~/r-arima/app.r', echo=TRUE)
source('~/r-arima/app.r', echo=TRUE)
getSymbols("MSFT")
summary(MSFT)
myTheme <- chart_theme()
myTheme$col$`bg` <- "white"
chartSeries(MSFT, subset = 'last 12 months',theme=myTheme)
addBBands()
adf.test(MSFT$MSFT.Adjusted)
ret_MSFT <- 100*diff(log(MSFT$MSFT.Adjusted[2274:2638]))
MSFT_ret_train <- ret_MSFT[1:(0.9*length(ret_MSFT))]
MSFT_ret_test <- ret_MSFT[(0.9*length(ret_MSFT)+1):length(ret_MSFT)]
fit <- Arima(MSFT_ret_train, order = c(2,0,2))
preds <- predict(fit, n.ahead = (length(ret_MSFT) - (0.9*length(ret_MSFT))))$pred
test_forecast <- forecast(fit,h = 25)
plot(test_forecast, main = "Arima forecast for Microsoft Stock")
View(X_trn_stocks)
getSymbols("AMZN")
summary(AMZN)
getSymbols("AMZN")
summary(AMZN)
myTheme <- chart_theme()
myTheme$col$`bg` <- "white"
chartSeries(AMZN, subset = 'last 12 months',theme=myTheme)
addBBands()
adf.test(AMZN$AMZN.Adjusted)
ret_AMZN <- 100*diff(log(AMZN$AMZN.Adjusted[2274:2638]))
AMZN_ret_train <- ret_AMZN[1:(0.9*length(ret_AMZN))]
AMZN_ret_test <- ret_AMZN[(0.9*length(ret_AMZN)+1):length(ret_AMZN)]
fit <- Arima(AMZN_ret_train, order = c(2,0,2))
preds <- predict(fit, n.ahead = (length(ret_AMZN) - (0.9*length(ret_AMZN))))$pred
test_forecast <- forecast(fit,h = 25)
plot(test_forecast, main = "Arima forecast for Microsoft Stock")
getSymbols("AMZN")
summary(AMZN)
myTheme <- chart_theme()
myTheme$col$`bg` <- "white"
chartSeries(AMZN, subset = 'last 12 months',theme=myTheme)
addBBands()
adf.test(AMZN$AMZN.Adjusted)
ret_AMZN <- 100*diff(log(AMZN$AMZN.Adjusted[2274:2638]))
AMZN_ret_train <- ret_AMZN[1:(0.9*length(ret_AMZN))]
AMZN_ret_test <- ret_AMZN[(0.9*length(ret_AMZN)+1):length(ret_AMZN)]
fit <- Arima(AMZN_ret_train, order = c(2,0,2))
preds <- predict(fit, n.ahead = (length(ret_AMZN) - (0.9*length(ret_AMZN))))$pred
test_forecast <- forecast(fit,h = 25)
plot(test_forecast, main = "Arima forecast for Amazon Stock")
getSymbols("AMZN")
summary(AMZN)
myTheme <- chart_theme()
myTheme$col$`bg` <- "white"
chartSeries(AMZN, subset = 'last 12 months',theme=myTheme)
addBBands()
adf.test(AMZN$AMZN.Adjusted)
ret_AMZN <- 100*diff(log(AMZN$AMZN.Adjusted[227:2638]))
AMZN_ret_train <- ret_AMZN[1:(0.9*length(ret_AMZN))]
AMZN_ret_test <- ret_AMZN[(0.9*length(ret_AMZN)+1):length(ret_AMZN)]
fit <- Arima(AMZN_ret_train, order = c(2,0,2))
preds <- predict(fit, n.ahead = (length(ret_AMZN) - (0.9*length(ret_AMZN))))$pred
test_forecast <- forecast(fit,h = 25)
plot(test_forecast, main = "Arima forecast for Amazon Stock")
indf_data <- getSymbols(Symbols = "INDF.JK", src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
indf_data <- getSymbols(Symbols = "MSFT", src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
indf_data
ARIMA("AMZN")
ARIMA <-function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
}
ARIMA("AMZN")
indf_data <- Cl(indf_data)
indf_data
ARIMA <-function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
chart_Series(indf_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
### Log tranformation stock data
indf_log <- log(indf_data)
head(indf_log, n = 10)
plot(indf_log, main = "log indf_data chart")
acf_log <- acf(indf_log, lag.max = 320)
pacf_log <- pacf(indf_log, lag.max = 320)
}
ARIMA("AMZN")
ARIMAModel <function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(2, 0, 4))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(2, 0, 4))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
install.packages("caTools")
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(caTools)
train_data <- indf_diff[1:1270]
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(2, 0, 4))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(caTools)
train_data <- indf_data[1:1270]
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(2, 0, 4))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(caTools)
train_data <- indf_data[1:1270]
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data)
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(caTools)
train_data <- indf_data[1:1270]
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(1, 0, 4))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
ARIMAModel <- function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
library(caTools)
train_data <- indf_data[1:1270]
library(forecast)
set.seed(123)
arima_model <- auto.arima(train_data, stationary = TRUE, ic = c("aicc", "aic", "bic"),
trace = TRUE)
summary(arima_model) ###summary for choosen best arima(p,d,q) model
checkresiduals(arima_model) ###diagnostic cheking
arima <- arima(train_data, order = c(1, 1, 0))
summary(arima)
forecast1 <- forecast(arima, h = 100)
plot(forecast1)
}
ARIMAModel("AMZN")
library(quantmod)
chartSeries(GSPC,theme="white")
summary(GSPC)
ARIMAModel("MSFT")
ARIMAModel("GOOG")
ARIMAModel("NFLX")
ARIMAModel("TSLA")
source('~/rproject/app.r', echo=TRUE)
df <- read_csv("NFLX.csv")
df = RemoveDollarSign(df)
df2 <- data.frame(df$Close,df$Compound)
#initialize plot
plot(df2, pch=16)
#initlialize model
model <- svm(Compound ~ Close , data = df, ranges=list(elsilon=seq(0,1,0.1), cost=1:100))
# make a prediction for each X
predictedY <- predict(model, df)
#print(predictedY)
# display the predictions
points(df$Close, predictedY, col = "blue", pch=4)
ARIMA <-function(ticker){
indf_data <- getSymbols(Symbols = ticker, src = "yahoo", from = Sys.Date() - 1953,
to = Sys.Date(), auto.assign = FALSE)
indf_data <- Cl(indf_data)
chart_Series(indf_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
### Log tranformation stock data
indf_log <- log(indf_data)
head(indf_log, n = 10)
plot(indf_log, main = "log indf_data chart")
acf_log <- acf(indf_log, lag.max = 320)
pacf_log <- pacf(indf_log, lag.max = 320)
}
ARIMA("AMZN")
predictStock <- function(a){
print(a)
val <- switch(
a,
"NFLX.csv",
"MSFT.csv",
"TSLA.csv",
"AMZN.csv",
"GOOG.csv",
)
df <- read_csv(paste(val))
df = RemoveDollarSign(df)
df2 <- data.frame(x = df$Close,y = df$Compound)
#initialize plot
y<-plot(df2, pch=16)
#initlialize model
model <- svm(y ~ x , data = df2, ranges=list(elsilon=seq(0,1,0.1), cost=1:100))
xtest = data.frame(x=c(7, 2, 3))
# make a prediction for each X
predictedY <- predict(model, df2)
#print(predictedY)
# display the predictions
points(df$Close, predictedY, col = "blue", pch=4)
return (y)
}
newPredict <- function(a){
print(a)
val <- switch(
a,
"NFLX.csv",
"MSFT.csv",
"TSLA.csv",
"AMZN.csv",
"GOOG.csv",
)
df <- read_csv(paste(val))
df = RemoveDollarSign(df)
library(FNN)   #knn regression
set.seed(1974) #fix the random generator seed
df2 <- data.frame(x = df$Close,y = df$Compound)
#Fit a knn regression with k=3
#using the knn.reg() function from the FNN package
knn3.bmd <- knn.reg(train=df2$x,
y=df2$y,
test= data.frame(x=seq(0,1)),
k=3)
}
predictStock <- function(a){
print(a)
val <- switch(
a,
"NFLX.csv",
"MSFT.csv",
"TSLA.csv",
"AMZN.csv",
"GOOG.csv",
)
df <- read_csv(paste(val))
df = RemoveDollarSign(df)
df2 <- data.frame(x = df$Close,y = df$Compound)
#initialize plot
y<-plot(df2, pch=16)
#initlialize model
model <- svm(y ~ x , data = df2, ranges=list(elsilon=seq(0,1,0.1), cost=1:100))
xtest = data.frame(x=c(7, 2, 3))
# make a prediction for each X
predictedY <- predict(model, df2)
#print(predictedY)
# display the predictions
points(df$Close, predictedY, col = "blue", pch=4)
return (y)
}
predictStock(1)
RemoveDollarSign <- function(ticker){
ticker$Close = as.numeric(gsub("[\\$,]", "", ticker$Close))
ticker$Open = as.numeric(gsub("[\\$,]", "", ticker$Open))
ticker$High = as.numeric(gsub("[\\$,]", "", ticker$High))
ticker$Low = as.numeric(gsub("[\\$,]", "", ticker$Low))
return (ticker)
}
predictStock(1)
source('~/r-arima/knn.r', echo=TRUE)
table(prediction, stocks$Increase[!stocksTrain])
